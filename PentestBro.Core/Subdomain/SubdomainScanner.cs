using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading;
using PentestBro.Core.Web;
using PentestBro.Model.Subdomain;

namespace PentestBro.Core.Subdomain
{
    public class SubdomainScanner
    {
        private const int RequestDelayMilliseconds = 3000;
        private const int MaxUrlLength = 2083;
        private readonly Browser browser = Browser.Instance;
        private readonly DnsResolver dnsResolver = new DnsResolver();

        private readonly IList<ISubdomainSource> subdomainSources = new List<ISubdomainSource>()
        {
            new SubdomainSourceAsk(),
            new SubdomainSourceBaidu(),
            new SubdomainSourceBing(),
            new SubdomainSourceCrt(),
            new SubdomainSourceGoogle(),
            new SubdomainSourceSublist3r(),
            new SubdomainSourceShodan(),
            new SubdomainSourceVirustotal(),
            new SubdomainSourceYahoo(),
        };

        public IList<SubdomainResult> Scan(string domain)
        {
            var foundSubdomains = new List<string>();
            var subdomainResults = new List<SubdomainResult>();
            var host = Domain.GetHostByDomain(domain);

            foundSubdomains.Clear();

            foreach (var subdomainSource in this.subdomainSources)
                this.SimpleScan(host, subdomainSource, foundSubdomains);

            foreach (var subdomain in foundSubdomains)
            {
                var ip = "Unknown";
                var ipAddress = this.dnsResolver.GetIPAddress(subdomain);

                if (ipAddress != null)
                    ip = ipAddress.ToString();

                subdomainResults.Add(new SubdomainResult(subdomain, ip));
            }

            return subdomainResults;
        }

        public void SimpleScan(string domain, ISubdomainSource subdomainSource, IList<string> foundSubdomains)
        {
            try
            {
                for (var page = 1; page <= subdomainSource.MaxPage; page++)
                {
                    var url = subdomainSource.GetUrl(domain, page, foundSubdomains);

                    if (url.Length > MaxUrlLength)
                        return;

                    var httpResult = this.browser.LoadHeader(url);

                    if (httpResult.IsSuccessStatusCode)
                    {
                        httpResult = this.browser.LoadWebsite(url, new List<string>());
                        var matches = subdomainSource.Regex.Matches(httpResult.Content);

                        if (matches.Count == 0)
                            break;

                        foreach (Match match in matches)
                        {
                            if (match.Groups.Count != 2)
                                continue;

                            var value = match.Groups[1].Value;
                            value = value.Replace("http://", string.Empty);
                            value = value.Replace("https://", string.Empty);
                            value = value.Replace("<b>", string.Empty);
                            value = value.Replace("</b>", string.Empty);
                            value = value.ToLower();

                            var index = value.IndexOf("/", StringComparison.Ordinal);

                            if (index >= 0)
                                value = value.Substring(0, index);

                            if (foundSubdomains.Contains(value) == false)
                                foundSubdomains.Add(value);
                        }

                        Thread.Sleep(RequestDelayMilliseconds);
                    }
                }
            }
            catch (Exception)
            {
                // ignored
            }
        }
    }
}
