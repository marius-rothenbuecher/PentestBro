using PentestBro.Model.Subdomain;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

namespace PentestBro.Core.Subdomain
{
    public class SubdomainFinder
    {
        private readonly DnsResolver dnsResolver = new DnsResolver();
        private readonly object subdomainScanLock = new object();

        public List<SubdomainResult> Scan(string domain)
        {
            var subdomainResults = new List<SubdomainResult>();
            var host = Domain.GetHostByDomain(domain);
            var lines = File.ReadAllLines("subdomains-10000.txt");
            var lineNumber = 0;

            var cts = new CancellationTokenSource();
            var options = new ParallelOptions();
            options.CancellationToken = cts.Token;

            try
            {
                Parallel.ForEach(lines, options, (line) =>
                {
                    try
                    {
                        var subDomain = $"{line}.{host}";
                        var ipAddress = this.dnsResolver.GetIPAddress(subDomain);

                        Thread.Sleep(30);

                        lock (this.subdomainScanLock)
                        {
                            lineNumber++;
                        }

                        if (ipAddress != null)
                        {
                            var subdomainResult = new SubdomainResult(subDomain, ipAddress.ToString());

                            lock (this.subdomainScanLock)
                            {
                                // break if all subdomains resolve
                                if (subdomainResults.Count > 20 && lineNumber < 30)
                                    cts.Cancel();

                                subdomainResults.Add(subdomainResult);
                            }
                        }
                    }
                    catch (Exception)
                    {
                        // Ignored
                    }
                });
            }
            catch (OperationCanceledException)
            {
                subdomainResults.Clear();
            }
            finally
            {
                cts.Dispose();
            }

            return subdomainResults;
        }
    }
}
