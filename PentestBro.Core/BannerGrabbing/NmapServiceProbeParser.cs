using PentestBro.Model.BannerGrabbing;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using PentestBro.Model;

namespace PentestBro.Core.BannerGrabbing
{
    public class NmapServiceProbeParser
    {
        private IList<ServiceProbe> serviceProbes = new List<ServiceProbe>();

        public NmapServiceProbeParser()
        {
            var lines = File.ReadAllLines("nmap-service-probes.txt");
            var protocolType = Layer4ProtocolType.TCP;
            var name = string.Empty;
            var probe = string.Empty;
            var ports = new List<ushort>();
            var sslPorts = new List<ushort>();

            foreach (var line in lines)
            {
                if (line.StartsWith("Probe"))
                {
                    if (name != string.Empty)
                    {
                        var serviceProbe = new ServiceProbe(protocolType, name, probe, ports, sslPorts);
                        this.serviceProbes.Add(serviceProbe);
                    }

                    ports = new List<ushort>();
                    sslPorts = new List<ushort>();

                    var protocolAndName = line.Split(' ');
                    var protocol = protocolAndName[1].ToLower();

                    if (protocol == Layer4ProtocolType.TCP.ToString().ToLower())
                        protocolType = Layer4ProtocolType.TCP;
                    else if (protocol == Layer4ProtocolType.UDP.ToString().ToLower())
                        protocolType = Layer4ProtocolType.UDP;

                    name = protocolAndName[2];

                    var startIndex = line.IndexOf("q|") + 2;
                    var endIndex = line.LastIndexOf("|");
                    probe = line.Substring(startIndex, endIndex - startIndex);
                }
                else if (line.StartsWith("ports"))
                {
                    var portRange = line.Replace("ports ", string.Empty);
                    ports.AddRange(this.ParsePorts(portRange));
                }
                else if (line.StartsWith("sslports"))
                {
                    var portRange = line.Replace("sslports ", string.Empty);
                    sslPorts.AddRange(this.ParsePorts(portRange));
                }
            }
        }

        public IEnumerable<ServiceProbe> GetServiceProbes(ushort port, Layer4ProtocolType protocolType)
        {
            return this.serviceProbes.Where(x => (x.Ports.Contains(port) || x.Ports.Count == 0) && x.ProtocolType == protocolType);
        }

        public IEnumerable<ServiceProbe> GetSslServiceProbes(ushort port, Layer4ProtocolType protocolType)
        {
            return this.serviceProbes.Where(x => x.SslPorts.Contains(port) && x.ProtocolType == protocolType);
        }

        public IEnumerable<ServiceProbe> GetUdpServiceProbes()
        {
            return this.serviceProbes.Where(x => x.ProtocolType == Layer4ProtocolType.UDP);
        }

        private IEnumerable<ushort> ParsePorts(string portsString)
        {
            var ports = new List<ushort>();
            var separtorSplits = portsString.Split(',');

            foreach (var separatorSplit in separtorSplits)
            {
                if (separatorSplit.Contains("-"))
                {
                    var portRange = separatorSplit.Split('-');
                    var startPort = Convert.ToUInt16(portRange[0]);
                    var endPort = Convert.ToUInt16(portRange[1]);

                    for (var portNumber = startPort; portNumber < endPort; portNumber++)
                        ports.Add(portNumber);
                }
                else
                {
                    var portNumber = Convert.ToUInt16(separatorSplit);
                    ports.Add(portNumber);
                }
            }

            return ports;
        }
    }
}
