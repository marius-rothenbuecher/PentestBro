using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Text.RegularExpressions;
using OpenQA.Selenium.Chrome;
using PentestBro.Model.Web;

namespace PentestBro.Core.Web
{
    public class Browser
    {
        private readonly object chromeDriverLock = new object();
        private ChromeOptions options;
        private ChromeDriverService chromeDriverService;
        private HttpClientWrapper httpClient;
        private ChromeDriver chromeDriver;

        static Browser()
        {
        }

        private Browser()
        {
            this.Configure();
        }

        ~Browser()
        {
            this.chromeDriver?.Quit();
        }

        public static Browser Instance { get; } = new Browser();

        private void Configure()
        {
            this.options = new ChromeOptions { AcceptInsecureCertificates = true, };
            this.options.AddArgument("--window-position=0,0");
            this.options.AddArgument("--window-size=1,1");
            this.chromeDriverService = ChromeDriverService.CreateDefaultService();
            this.chromeDriverService.HideCommandPromptWindow = true;
            this.httpClient = new HttpClientWrapper();
        }

        public HttpResponse LoadWebsite(string fullUrl, List<string> errorStrings)
        {
            if (this.chromeDriver == null)
                this.InitializeChromeDriver();

            lock (this.chromeDriverLock)
            {
                var result = new HttpResponse(true, HttpStatusCode.OK);

                if (errorStrings.Any() == false)
                    result = this.LoadHeader(fullUrl);

                if (result.IsSuccessStatusCode)
                {
                    try
                    {
                        this.chromeDriver.Navigate().GoToUrl(fullUrl);

                        var content = this.chromeDriver.PageSource;

                        var strippedFullUrl = Regex.Replace(fullUrl, ":\\d+", string.Empty);
                        var strippedChromeUrl = Regex.Replace(this.chromeDriver.Url, ":\\d+", string.Empty);

                        if (strippedChromeUrl != strippedFullUrl)
                            result = new HttpResponse(false, HttpStatusCode.ExpectationFailed);

                        foreach (var errorString in errorStrings)
                            if (content.Contains(errorString))
                                result = new HttpResponse(false, HttpStatusCode.ExpectationFailed);

                        result.Content = content;
                    }
                    catch (Exception)
                    {
                        // ignored
                    }
                }

                return result;
            }
        }

        public HttpResponse LoadHeader(string fullUrl)
        {
            var request = new HttpRequestMessage(HttpMethod.Head, fullUrl);
            var result = this.httpClient.Send(request);

            return new HttpResponse(result.IsSuccessStatusCode, result.StatusCode);
        }

        private void InitializeChromeDriver()
        {
            this.chromeDriver = new ChromeDriver(this.chromeDriverService, this.options);
        }
    }
}
