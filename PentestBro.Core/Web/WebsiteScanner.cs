using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using HtmlAgilityPack;
using PentestBro.Model.Web;

namespace PentestBro.Core.Web
{
    public class WebsiteScanner
    {
        private readonly object httpUrlLock = new object();
        private readonly Browser browser = Browser.Instance;

        public void Scan(HttpUrl httpUrl)
        {
            var scanResult = new ScanResult();
            this.RecursiveScan(httpUrl, new[] { httpUrl.Host }, scanResult);
        }

        public void Scan(HttpUrl httpUrl, IList<string> targetHosts)
        {
            var scanResult = new ScanResult();
            this.RecursiveScan(httpUrl, targetHosts, scanResult);
        }

        private void RecursiveScan(HttpUrl httpUrl, ScanResult scanResult)
        {
            this.RecursiveScan(httpUrl, new[] { httpUrl.Host }, scanResult);
        }

        private void RecursiveScan(HttpUrl httpUrl, IList<string> targetHosts, ScanResult scanResult)
        {
            if (targetHosts.Any(x => httpUrl.Host.EndsWith(x)) == false)
                return;

            lock (this.httpUrlLock)
            {
                var storedHttpUrl = scanResult.GetHttpUrls().SingleOrDefault(x => x.Equals(httpUrl));

                if (storedHttpUrl != null)
                {
                    this.AddQueryString(httpUrl, storedHttpUrl.QueryString);
                    return;
                }

                scanResult.AddHttpUrl(httpUrl);
            }

            Console.WriteLine($"Scanning URL {httpUrl.FullUrl}");

            var node = this.GetDocumentNode(httpUrl);

            if (node.OuterLength <= 0)
                return;

            var content = node.OuterHtml;
            var hrefs = node.GetHrefs();

            scanResult.AddComments(httpUrl, node.GetComments());

            Parallel.ForEach(hrefs, href =>
            {
                var hrefType = UrlParser.GetHrefType(href);

                switch (hrefType)
                {
                    case HrefType.Anchor:
                        break;
                    case HrefType.BrowserUrl:
                        scanResult.AddBrowserUrl(httpUrl, href);
                        break;
                    case HrefType.DataUrl:
                        scanResult.AddDataUrl(httpUrl, href);
                        break;
                    case HrefType.FtpUrl:
                        var host = UrlParser.GetHostFromUrl(href);
                        var path = UrlParser.GetPathFromUrl(href);
                        var fileName = UrlParser.GetFileNameFromUrl(href);
                        scanResult.AddFtpUrl(httpUrl, new FtpUrl(host, path, fileName));
                        break;
                    case HrefType.Javascript:
                        scanResult.AddJavascriptUrl(httpUrl, href);
                        break;
                    case HrefType.MailAddress:
                        scanResult.AddMailAddress(httpUrl, href);
                        break;
                    case HrefType.UnknownUrl:
                        scanResult.AddUnkownUrl(httpUrl, href);
                        break;
                }

                if (hrefType == HrefType.FullUrl)
                {
                    var url = UrlParser.GetHttpUrl(href);
                    this.RecursiveScan(url, targetHosts, scanResult);
                }
                else if (hrefType == HrefType.RelativePath)
                {
                    var url = UrlParser.GetHttpUrl(httpUrl, href);
                    this.RecursiveScan(url, targetHosts, scanResult);
                }
            });
        }

        private void AddQueryString(HttpUrl httpUrl, QueryString queryString)
        {
            foreach (KeyValuePair<string, List<string>> variable in queryString)
            {
                if (httpUrl.QueryString.ContainsKey(variable.Key))
                {
                    var values = httpUrl.QueryString[variable.Key];
                    var newValues = queryString[variable.Key];

                    foreach (var newValue in newValues)
                    {
                        if (values.Any(x => x == newValue))
                            continue;

                        values.Add(newValue);
                    }
                }
                else
                {
                    httpUrl.QueryString.Add(variable.Key, variable.Value);
                }
            }
        }

        private HtmlNode GetDocumentNode(HttpUrl httpUrl)
        {
            var document = new HtmlDocument();
            var response = this.browser.LoadWebsite(httpUrl.FullUrl, new List<string>());

            if (response.StatusCode == HttpStatusCode.OK)
            {
                document.LoadHtml(response.Content);

                if (document == null || document.DocumentNode == null)
                    throw new InvalidCastException();

                return document.DocumentNode;
            }

            return new HtmlNode(HtmlNodeType.Document, document, 0);
        }
    }
}
