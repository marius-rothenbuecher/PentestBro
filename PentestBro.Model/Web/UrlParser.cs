using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Web;

namespace PentestBro.Model.Web
{
    public static class UrlParser
    {
        public static HrefType GetHrefType(string href)
        {
            var protocolRegex = new Regex("[a-zA-Z0-9]+:");
            href = href.ToLower();

            // https://www.w3.org/wiki/UriSchemes
            if (href.StartsWith("http:") || href.StartsWith("https:"))
                return HrefType.FullUrl;
            if (href.StartsWith("ftp:"))
                return HrefType.FtpUrl;
            if (href.StartsWith("mailto:"))
                return HrefType.MailAddress;
            if (href.StartsWith("javascript:"))
                return HrefType.Javascript;
            if (href.StartsWith("about:") || href.StartsWith("chrome:"))
                return HrefType.BrowserUrl;
            if (href.StartsWith("data:"))
                return HrefType.DataUrl;
            if (href.StartsWith("#"))
                return HrefType.Anchor;
            if (protocolRegex.IsMatch(href))
                return HrefType.UnknownUrl;

            return HrefType.RelativePath;
        }

        public static QueryString GetQueryString(string href)
        {
            var queryString = new QueryString();

            var index = href.IndexOf('?');
            var query = index >= 0 ? href.Substring(index) : string.Empty;

            if (query != string.Empty)
            {
                var variables = HttpUtility.ParseQueryString(query);

                foreach (var key in variables.AllKeys.Where(x => x != null))
                    queryString.Add(key, variables.GetValues(key).ToList());
            }

            return queryString;
        }

        public static string GetAnchorFromUrl(string href)
        {
            var index = href.IndexOf("#", StringComparison.Ordinal);

            if (index < 0)
                return string.Empty;

            return href.Substring(index + 1);
        }

        public static string GetFileNameFromUrl(string href)
        {
            var uri = new Uri(href);

            if (uri.IsFile)
                return Path.GetFileName(uri.LocalPath);

            return string.Empty;
        }

        public static string GetPathFromUrl(string href)
        {
            var uri = new Uri(href);
            return uri.LocalPath;
        }

        public static string GetHostFromUrl(string href)
        {
            var uri = new Uri(href);
            return uri.Host;
        }

        public static HttpUrl GetHttpUrl(string fullUrl)
        {
            var host = GetHostFromUrl(fullUrl);
            var path = GetPathFromUrl(fullUrl);
            var fileName = GetFileNameFromUrl(fullUrl);
            var anchor = GetAnchorFromUrl(fullUrl);
            var queryString = GetQueryString(fullUrl);

            var url = new HttpUrl(host, path, fileName, fullUrl.StartsWith("https:"))
            {
                Anchor = anchor,
                QueryString = queryString,
            };

            return url;
        }

        public static HttpUrl GetHttpUrl(HttpUrl sourceHttpUrl, string relativePath)
        {
            var fullUrl = relativePath.StartsWith("/")
                ? sourceHttpUrl.BaseUrl + relativePath
                : sourceHttpUrl.FullUrl + relativePath;

            var path = GetPathFromUrl(fullUrl);
            var fileName = GetFileNameFromUrl(fullUrl);
            var anchor = GetAnchorFromUrl(fullUrl);
            var queryString = GetQueryString(fullUrl);

            var url = new HttpUrl(sourceHttpUrl.Host, path, fileName, sourceHttpUrl.Protocol == "https")
            {
                Anchor = anchor,
                QueryString = queryString,
            };

            return url;
        }
    }
}
