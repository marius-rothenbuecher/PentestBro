using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;

namespace PentestBro.Model.Web
{
    public class ScanResult
    {
        private object httpUrlLock = new object();
        private object contentLock = new object();
        private object commentLock = new object();
        private object dataUrlLock = new object();
        private object browserUrlLock = new object();
        private object javascriptUrlLock = new object();
        private object mailAddressLock = new object();
        private object unknownUrlLock = new object();
        private object ftpUrlLock = new object();

        private IDictionary<HttpUrl, IList<MailAddress>> mailAddresses = new Dictionary<HttpUrl, IList<MailAddress>>();
        private IDictionary<HttpUrl, IList<FtpUrl>> ftpUrls = new Dictionary<HttpUrl, IList<FtpUrl>>();
        private IDictionary<HttpUrl, IList<string>> browserUrls = new Dictionary<HttpUrl, IList<string>>();
        private IDictionary<HttpUrl, IList<string>> comments = new Dictionary<HttpUrl, IList<string>>();
        private IDictionary<HttpUrl, IList<string>> dataUrls = new Dictionary<HttpUrl, IList<string>>();
        private IDictionary<HttpUrl, IList<string>> javascriptUrls = new Dictionary<HttpUrl, IList<string>>();
        private IDictionary<HttpUrl, IList<string>> unknownUrls = new Dictionary<HttpUrl, IList<string>>();
        private IList<HttpUrl> httpUrls = new List<HttpUrl>();

        public void AddHttpUrl(HttpUrl httpUrl)
        {
            lock (this.httpUrlLock)
            {
                this.httpUrls.Add(httpUrl);
            }
        }

        public IList<HttpUrl> GetHttpUrlsWithQueryString()
        {
            lock (this.httpUrlLock)
            {
                return this.httpUrls.Where(x => x.QueryString.Any()).ToList();
            }
        }

        public IList<HttpUrl> GetHttpUrls()
        {
            lock (this.httpUrlLock)
            {
                return this.httpUrls;
            }
        }

        public void AddComments(HttpUrl httpUrl, IList<string> comments)
        {
            lock (this.commentLock)
            {
                comments = comments.Where(x => this.comments.Values.SelectMany(y => y).Contains(x) == false).ToList();

                if (comments.Any())
                    this.comments.Add(httpUrl, comments);
            }
        }

        public void AddDataUrl(HttpUrl httpUrl, string href)
        {
            lock (this.dataUrlLock)
            {
                if (this.dataUrls.SelectMany(x => x.Value).Any(x => x == href))
                    return;

                if (this.dataUrls.ContainsKey(httpUrl))
                    this.dataUrls[httpUrl].Add(href);
                else
                    this.dataUrls.Add(httpUrl, new List<string> { href });
            }
        }

        public void AddBrowserUrl(HttpUrl httpUrl, string href)
        {
            lock (this.browserUrlLock)
            {
                if (this.browserUrls.SelectMany(x => x.Value).Any(x => x == href))
                    return;

                if (this.browserUrls.ContainsKey(httpUrl))
                    this.browserUrls[httpUrl].Add(href);
                else
                    this.browserUrls.Add(httpUrl, new List<string> { href });
            }
        }

        public void AddJavascriptUrl(HttpUrl httpUrl, string href)
        {
            lock (this.javascriptUrlLock)
            {
                if (this.javascriptUrls.SelectMany(x => x.Value).Any(x => x == href))
                    return;

                if (this.javascriptUrls.ContainsKey(httpUrl))
                    this.javascriptUrls[httpUrl].Add(href);
                else
                    this.javascriptUrls.Add(httpUrl, new List<string> { href });
            }
        }

        public void AddMailAddress(HttpUrl httpUrl, string href)
        {
            lock (this.mailAddressLock)
            {
                var mailAddressString = href.Replace("mailto:", string.Empty);
                var mailAddress = new MailAddress(mailAddressString);

                if (this.mailAddresses.SelectMany(x => x.Value).Any(x => x.Address == mailAddress.Address))
                    return;

                if (this.mailAddresses.ContainsKey(httpUrl))
                    this.mailAddresses[httpUrl].Add(mailAddress);
                else
                    this.mailAddresses.Add(httpUrl, new List<MailAddress> { mailAddress });
            }
        }

        public void AddUnkownUrl(HttpUrl httpUrl, string href)
        {
            lock (this.unknownUrlLock)
            {
                if (this.unknownUrls.SelectMany(x => x.Value).Any(x => x == href))
                    return;

                if (this.unknownUrls.ContainsKey(httpUrl))
                    this.unknownUrls[httpUrl].Add(href);
                else
                    this.unknownUrls.Add(httpUrl, new List<string> { href });
            }
        }

        public void AddFtpUrl(HttpUrl httpUrl, FtpUrl ftpUrl)
        {
            lock (this.ftpUrlLock)
            {
                if (this.ftpUrls.SelectMany(x => x.Value).Any(x => x == ftpUrl))
                    return;

                if (this.ftpUrls.ContainsKey(httpUrl))
                    this.ftpUrls[httpUrl].Add(ftpUrl);
                else
                    this.ftpUrls.Add(httpUrl, new List<FtpUrl> { ftpUrl });
            }
        }
    }
}
