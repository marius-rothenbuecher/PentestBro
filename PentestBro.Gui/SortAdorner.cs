using System.ComponentModel;
using System.Windows;
using System.Windows.Documents;
using System.Windows.Media;

namespace PentestBro.Gui
{
    public class SortAdorner : Adorner
    {
        private static readonly Geometry AscGeometry = Geometry.Parse("M 0,0 L 8,0 L 4,3 Z");
        private static readonly Geometry DescGeometry = Geometry.Parse("M 0,3 L 8,3 L 4,0 Z");
        private readonly TranslateTransform translateTransform;
        private readonly Brush adornerColor;

        public SortAdorner(UIElement element, ListSortDirection dir, VerticalAlignment sortAdornerVertical = VerticalAlignment.Top, HorizontalAlignment sortAdornerHorizontal = HorizontalAlignment.Right, Brush adornerColor = null, bool filterRowExists = false)
            : base(element)
        {
            // fix height
            var offsetY = filterRowExists ? 30 : 6;
            
            var positionY = 3d;
            if (sortAdornerVertical == VerticalAlignment.Center)
                positionY = (this.AdornedElement.DesiredSize.Height - offsetY) / 2;
            if (sortAdornerVertical == VerticalAlignment.Bottom)
                positionY = this.AdornedElement.RenderSize.Height - offsetY;
            
            var positionX = 1d;
            if (sortAdornerHorizontal == HorizontalAlignment.Center)
                positionX = this.AdornedElement.DesiredSize.Width;
            if (sortAdornerHorizontal == HorizontalAlignment.Right)
                positionX = this.AdornedElement.RenderSize.Width - 10;

            this.translateTransform = new TranslateTransform(positionX, positionY);
            this.Direction = dir;
            this.adornerColor = adornerColor ?? Brushes.Black;
        }

        public ListSortDirection Direction { get; private set; }

        protected override void OnRender(DrawingContext drawingContext)
        {
            base.OnRender(drawingContext);

            if (this.AdornedElement.RenderSize.Width < 20)
                return;

            var sortGeometry = this.Direction == ListSortDirection.Ascending ? AscGeometry : DescGeometry;

            drawingContext.PushTransform(this.translateTransform);
            drawingContext.DrawGeometry(this.adornerColor, null, sortGeometry);
            drawingContext.Pop();
        }
    }
}
