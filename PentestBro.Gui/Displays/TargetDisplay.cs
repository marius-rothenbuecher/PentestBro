using System;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using PentestBro.Gui.Properties;
using PentestBro.Model.Subdomain;

namespace PentestBro.Gui.Displays
{
    public class TargetDisplay : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;
        private BasicScanItemDisplay selectedBannerScanItemDisplay;
        private WebScanItemDisplay selectedWebScanItemDisplay;

        public TargetDisplay(string name)
        {
            this.Name = name;
        }

        public string Name { get; set; }
        
        public ObservableCollection<BasicScanItemDisplay> BasicScanItemDisplays { get; set; } = new ObservableCollection<BasicScanItemDisplay>();
        public ObservableCollection<WebScanItemDisplay> WebScanItemDisplays { get; set; } = new ObservableCollection<WebScanItemDisplay>();
        public ObservableCollection<WhoisDisplay> WhoisDisplays { get; set; } = new ObservableCollection<WhoisDisplay>();

        public void AddDomain(string ipAddress, string domain)
        {
            var host = Domain.GetHostByDomain(domain);
            var subdomain = domain.Replace($".{host}", string.Empty);

            if (host == subdomain && domain == subdomain)
                subdomain = string.Empty;

            var itemDisplay = new BasicScanItemDisplay(ipAddress);
            var domainDisplay = new DomainDisplay(host);

            if (this.BasicScanItemDisplays.Any(x => x.IPAddress == ipAddress))
                itemDisplay = this.BasicScanItemDisplays.Single(x => x.IPAddress == ipAddress);
            else
                this.BasicScanItemDisplays.Add(itemDisplay);

            if (itemDisplay.DomainDisplays.Any(x => x.Host == host))
                domainDisplay = itemDisplay.DomainDisplays.Single(x => x.Host == host);
            else
                itemDisplay.DomainDisplays.Add(domainDisplay);

            if (domainDisplay.Subdomains.Contains(subdomain) == false)
                domainDisplay.Subdomains.Add(subdomain);
        }

        public void AddIpAddress(string ipAddress)
        {
            var itemDisplay = new BasicScanItemDisplay(ipAddress);

            if (this.BasicScanItemDisplays.Any(x => x.IPAddress == ipAddress))
                itemDisplay = this.BasicScanItemDisplays.Single(x => x.IPAddress == ipAddress);
            else
                this.BasicScanItemDisplays.Add(itemDisplay);
        }

        public void AddBanner(string ipAddress, PortDescription portDescription)
        {
            var itemDisplay = this.BasicScanItemDisplays.SingleOrDefault(x => x.IPAddress == ipAddress);

            if (itemDisplay == null)
                return;

            var description = itemDisplay.PortDescriptions.SingleOrDefault(x => x.Port == portDescription.Port && x.Protocol == portDescription.Protocol);

            if (description == null)
                return;

            description.Banner = portDescription.Banner;

            var selectedItem = this.SelectedBannerScanItemDisplay;
            this.OnPropertyChanged(nameof(this.BasicScanItemDisplays));
            this.SelectedBannerScanItemDisplay = selectedItem;
        }

        public void AddWhoisLookup(string host, string content)
        {
            var whoisDisplay = new WhoisDisplay(host, content);

            if (this.WhoisDisplays.Any(x => x.Content == content))
            {
                var whoisDisplayToDelete = this.WhoisDisplays.Single(x => x.Content == content);
                this.WhoisDisplays.Remove(whoisDisplayToDelete);
            }

            this.WhoisDisplays.Add(whoisDisplay);
        }

        public BasicScanItemDisplay SelectedBannerScanItemDisplay
        {
            get
            {
                return this.selectedBannerScanItemDisplay;
            }
            set
            {
                this.selectedBannerScanItemDisplay = value;
                this.OnPropertyChanged();
            }
        }

        public WebScanItemDisplay SelectedWebScanItemDisplay
        {
            get
            {
                return this.selectedWebScanItemDisplay;
            }
            set
            {
                this.selectedWebScanItemDisplay = value;
                this.OnPropertyChanged();
            }
        }

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName]string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
