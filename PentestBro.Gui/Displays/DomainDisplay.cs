using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Runtime.Serialization;
using PentestBro.Gui.Properties;

namespace PentestBro.Gui.Displays
{
    public class DomainDisplay : INotifyPropertyChanged
    {
        private bool isSubdomainScanRunning;

        public DomainDisplay(string host)
        {
            this.Host = host;
        }

        public string Host { get; set; }

        public ObservableCollection<string> Subdomains { get; set; } = new ObservableCollection<string>();

        [IgnoreDataMember]
        public bool IsSubdomainScanRunning
        {
            get
            {
                return this.isSubdomainScanRunning;
            }
            set
            {
                this.isSubdomainScanRunning = value;
                this.OnPropertyChanged();
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}