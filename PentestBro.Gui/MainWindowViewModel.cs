using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Net;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Threading;
using Microsoft.Win32;
using PentestBro.Core;
using PentestBro.Core.BannerGrabbing;
using PentestBro.Core.Subdomain;
using PentestBro.Core.Web;
using PentestBro.Core.Whois;
using PentestBro.Gui.Displays;
using PentestBro.Gui.Properties;
using PentestBro.Model;
using PentestBro.Model.Subdomain;
using PentestBro.Model.Web;
using ServiceStack;
using ServiceStack.Text;

namespace PentestBro.Gui
{
    internal class MainWindowViewModel : INotifyPropertyChanged
    {
        public event PropertyChangedEventHandler PropertyChanged;

        private readonly Random random = new Random();
        private readonly CaptureDevice captureDevice = CaptureDevice.Instance;
        private readonly DnsResolver dnsResolver = new DnsResolver();
        private readonly Browser browser = Browser.Instance;
        private readonly NmapBannerGrabber nmapBannerGrabber = new NmapBannerGrabber();
        private readonly PathFinder pathFinder = new PathFinder();
        private readonly PortDescriptionService portDescriptionService = new PortDescriptionService();
        private readonly RobotsAnalyzer robotsAnalyzer = new RobotsAnalyzer();
        private readonly SubdomainFinder subdomainFinder = new SubdomainFinder();
        private readonly SubdomainScanner subdomainScanner = new SubdomainScanner();
        private readonly PortScanner portScanner = new PortScanner();
        private readonly WebsiteScanner websiteScanner = new WebsiteScanner();
        private readonly WhoisLookup whoisLookup = new WhoisLookup();
        private TargetDisplay selectedTargetDisplay;

        public MainWindowViewModel()
        {
            this.ExportCommand = new RelayCommand(this.Export, () => true);
            this.ImportCommand = new RelayCommand(this.Import, () => true);

            this.AddTargetCommand = new RelayCommand(this.AddTarget, () => true);
            this.AddDomainCommand = new RelayCommand(this.AddDomain, () => this.SelectedTargetDisplay != null);
            this.AddIpAddressCommand = new RelayCommand(this.AddIpAddress, () => this.SelectedTargetDisplay != null);
            this.AddWebScanCommand = new RelayCommand<HttpUrl>(this.AddWebScan);
            this.DeleteBasicScanItemCommand = new RelayCommand<BasicScanItemDisplay>(this.DeleteBasicScanItem);
            this.DeleteTargetCommand = new RelayCommand(this.DeleteTarget, () => this.SelectedTargetDisplay != null);

            this.ScanAllBannersCommand = new RelayCommand(this.ScanAllBanners, this.IsBannerScanAvailable);
            this.ScanAllPortsCommand = new RelayCommand(this.ScanAllPorts, () => true);

            this.ScanArpCommand = new RelayCommand(this.ScanArp, () => true);
            this.ScanPortsCommand = new RelayCommand<BasicScanItemDisplay>(this.ScanPorts);
            this.ScanSubdomainsCommand = new RelayCommand<DomainDisplay>(this.ScanSubdomains);

            this.ScanPathsCommand = new RelayCommand(this.ScanPaths, () => true);
            this.ScanRobotsCommand = new RelayCommand(this.ScanRobots, () => true);

            this.ScanBannersCommand = new RelayCommand<BasicScanItemDisplay>(this.ScanBanners);

            this.CopyLinkCommand = new RelayCommand<HttpUrl>(this.CopyLink);
            this.CopyStringCommand = new RelayCommand<string>(this.CopyString);
        }

        private void Export()
        {
            var json = this.TargetDisplays.ToJson().IndentJson();

            var saveFileDialog = new SaveFileDialog
            {
                Filter = "Pentest Bro (*.pbro)|*.pbro",
            };

            if (saveFileDialog.ShowDialog() == true)
                File.WriteAllText(saveFileDialog.FileName, json);
        }

        private void Import()
        {
            var json = string.Empty;

            var openFileDialog = new OpenFileDialog
            {
                Filter = "Pentest Bro (*.pbro)|*.pbro"
            };

            if (openFileDialog.ShowDialog() == true)
            {
                json = File.ReadAllText(openFileDialog.FileName);
                this.TargetDisplays = new ObservableCollection<TargetDisplay>(JsonSerializer.DeserializeFromString<List<TargetDisplay>>(json));
                this.OnPropertyChanged(nameof(this.TargetDisplays));
            }
        }

        private bool IsBannerScanAvailable()
        {
            if (this.SelectedTargetDisplay != null)
            {
                if (this.SelectedTargetDisplay.BasicScanItemDisplays.Any(x => x.PortDescriptions.Any()))
                    return true;
            }

            return false;
        }

        private void RunTask(Action<Dispatcher> action)
        {
            var dispatcher = Dispatcher.CurrentDispatcher;
            Task.Run(() => action(dispatcher));
        }

        private void AddTarget()
        {
            var targetDialog = new TargetDialog();
            var targetDialogResult = targetDialog.ShowDialog();

            if (targetDialogResult.HasValue && targetDialogResult.Value)
            {
                var name = targetDialog.NameText;
                var targetHost = targetDialog.HostText;

                if (this.TargetDisplays.Any(x => x.Name == name))
                    return;

                this.RunTask(uiThread =>
                {
                    if (IPAddress.TryParse(targetHost, out var dummy) == false)
                    {
                        var host = Domain.GetHostByDomain(targetHost);
                        var targetDisplay = new TargetDisplay(name);
                        var ipAddress = this.dnsResolver.GetIPAddress(targetHost);

                        if (ipAddress == null)
                            return;

                        var ipWhoisResult = this.whoisLookup.Whois(ipAddress.ToString());
                        var hostWhoisResult = this.whoisLookup.Whois(host);

                        uiThread.Execute(() =>
                        {
                            targetDisplay.AddDomain(ipAddress.ToString(), targetHost);
                            targetDisplay.AddWhoisLookup(ipAddress.ToString(), ipWhoisResult);
                            targetDisplay.AddWhoisLookup(host, hostWhoisResult);

                            this.TargetDisplays.Add(targetDisplay);
                            this.SelectedTargetDisplay = targetDisplay;
                            CommandManager.InvalidateRequerySuggested();
                        });
                    }
                    else
                    {
                        var targetDisplay = new TargetDisplay(name);
                        var ipAddress = targetHost;

                        if (ipAddress == null)
                            return;

                        var ipWhoisResult = this.whoisLookup.Whois(ipAddress.ToString());

                        uiThread.Execute(() =>
                        {
                            targetDisplay.AddWhoisLookup(ipAddress.ToString(), ipWhoisResult);
                            targetDisplay.AddIpAddress(ipAddress);

                            this.TargetDisplays.Add(targetDisplay);
                            this.SelectedTargetDisplay = targetDisplay;
                            CommandManager.InvalidateRequerySuggested();
                        });
                    }
                });
            }
        }

        private void ScanAllBanners()
        {
            var basicScanItems = this.SelectedTargetDisplay.BasicScanItemDisplays;

            foreach (var basicScanItem in basicScanItems)
                this.ScanBanners(basicScanItem);
        }

        private void ScanBanners(BasicScanItemDisplay basicScanItemDisplay)
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;

            if (basicScanItemDisplay.IsBannerScanRunning)
                return;

            basicScanItemDisplay.IsBannerScanRunning = true;

            this.RunTask(uiThread =>
            {
                var ipAddress = basicScanItemDisplay.IPAddress;

                foreach (var portDescription in basicScanItemDisplay.PortDescriptions)
                {
                    portDescription.Banner = this.nmapBannerGrabber.Grab(IPAddress.Parse(ipAddress), portDescription.Port, portDescription.Protocol);

                    if (portDescription.Banner != string.Empty)
                    {
                        uiThread.Execute(() =>
                        {
                            selectedTargetDisplay.AddBanner(ipAddress, portDescription);
                        });
                    }
                }

                uiThread.Execute(() =>
                {
                    basicScanItemDisplay.IsBannerScanRunning = false;
                });
            });
        }

        private void AddDomain()
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;
            var domainDialog = new DomainDialog();
            var domainDialogResult = domainDialog.ShowDialog();

            if (domainDialogResult.HasValue && domainDialogResult.Value)
            {
                var domain = domainDialog.DomainText;

                this.RunTask(uiThread =>
                {
                    var host = Domain.GetHostByDomain(domain);
                    var ipAddress = this.dnsResolver.GetIPAddress(domain);
                    var ipWhoisResult = this.whoisLookup.Whois(ipAddress.ToString());
                    var hostWhoisResult = this.whoisLookup.Whois(host);

                    if (ipAddress == null)
                        return;

                    uiThread.Execute(() =>
                    {
                        selectedTargetDisplay.AddDomain(ipAddress.ToString(), domain);

                        selectedTargetDisplay.AddWhoisLookup(ipAddress.ToString(), ipWhoisResult);
                        selectedTargetDisplay.AddWhoisLookup(host, hostWhoisResult);
                    });
                });
            }
        }

        private void AddIpAddress()
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;
            var ipDialog = new IpAddressDialog();
            var ipDialogResult = ipDialog.ShowDialog();

            if (ipDialogResult.HasValue && ipDialogResult.Value)
            {
                var ipAddress = ipDialog.IpAddressText;

                this.RunTask(uiThread =>
                {
                    if (IPAddress.TryParse(ipAddress, out var dummy) == false)
                        return;

                    var ipWhoisResult = this.whoisLookup.Whois(ipAddress);


                    uiThread.Execute(() =>
                    {
                        selectedTargetDisplay.AddIpAddress(ipAddress);

                        selectedTargetDisplay.AddWhoisLookup(ipAddress.ToString(), ipWhoisResult);
                    });
                });
            }
        }

        private void AddWebScan(HttpUrl suggestedHttpUrl)
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;

            if (suggestedHttpUrl == null)
                suggestedHttpUrl = HttpUrl.Default;

            var isAcknowledged = false;
            var isInvalidUrl = false;
            var webScanItemDisplay = new WebScanItemDisplay(suggestedHttpUrl);

            do
            {
                var webScanDialog = new WebScanDialog(suggestedHttpUrl);
                var webScanDialogResult = webScanDialog.ShowDialog();
                var domain = webScanDialog.DomainText;
                var port = webScanDialog.PortText;
                var useHttps = webScanDialog.UseHttpsCheck.HasValue && webScanDialog.UseHttpsCheck.Value;

                if (webScanDialogResult.HasValue && webScanDialogResult.Value)
                {
                    var host = port == string.Empty ? domain : $"{domain}:{port}";
                    var httpUrl = new HttpUrl(host, string.Empty, string.Empty, useHttps);
                    webScanItemDisplay = new WebScanItemDisplay(httpUrl);

                    if (selectedTargetDisplay.WebScanItemDisplays.Any(x => x.HttpUrl.FullUrl == httpUrl.FullUrl))
                        return;

                    if (this.browser.LoadHeader(httpUrl.FullUrl).IsSuccessStatusCode)
                    {
                        foreach (var errorContentString in this.HandleHttpHeaderCompliance(webScanItemDisplay.HttpUrl))
                            webScanItemDisplay.ErrorContentStrings.Add(errorContentString);

                        isInvalidUrl = false;
                    }
                    else
                    {
                        isInvalidUrl = true;
                    }
                }

                isAcknowledged = webScanDialogResult.HasValue && webScanDialogResult.Value;
            } while (isAcknowledged && isInvalidUrl);

            if (isAcknowledged)
            {
                this.RunTask((uiThread) =>
                {
                    uiThread.Execute(() =>
                    {
                        selectedTargetDisplay.WebScanItemDisplays.Add(webScanItemDisplay);
                        selectedTargetDisplay.SelectedWebScanItemDisplay = webScanItemDisplay;
                    });
                });
            }
        }

        private void DeleteBasicScanItem(BasicScanItemDisplay basicScanItemDisplay)
        {
            this.SelectedTargetDisplay.BasicScanItemDisplays.Remove(basicScanItemDisplay);
        }

        private void DeleteTarget()
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;

            this.RunTask((uiThread) =>
            {
                uiThread.Execute(() =>
                {
                    var index = this.TargetDisplays.IndexOf(selectedTargetDisplay);
                    this.TargetDisplays.Remove(selectedTargetDisplay);

                    if (index > 0)
                    {
                        index--;
                        this.SelectedTargetDisplay = this.TargetDisplays.ElementAt(index);
                    }
                });
            });
        }

        private void ScanAllPorts()
        {
            var basicScanItems = this.SelectedTargetDisplay.BasicScanItemDisplays.OrderBy(x => x.IPAddress.ToString());

            foreach (var basicScanItem in basicScanItems)
                this.ScanPorts(basicScanItem);
        }

        private void ScanArp()
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;

            this.RunTask((uiThread) =>
            {
                var ipAddresses = this.captureDevice.GetLanIpAddresses();

                uiThread.Execute(() =>
                {
                    foreach (var ipAddress in ipAddresses)
                        selectedTargetDisplay.AddIpAddress(ipAddress.ToString());
                });
            });
        }

        private void ScanPorts(BasicScanItemDisplay basicScanItemDisplay)
        {
            if (basicScanItemDisplay.IPAddress == "Unknown")
                return;

            if (basicScanItemDisplay.IsPortScanRunning)
                return;

            basicScanItemDisplay.IsPortScanRunning = true;

            this.RunTask(uiThread =>
            {
                var tcpPorts = this.portScanner.SynScan(basicScanItemDisplay.IPAddress);
                var udpPorts = this.portScanner.UdpScan(basicScanItemDisplay.IPAddress);

                uiThread.Execute(() =>
                {
                    basicScanItemDisplay.PortDescriptions.Clear();

                    foreach (var port in tcpPorts)
                    {
                        if (this.portDescriptionService.PortDescriptions.ContainsKey(port))
                        {
                            var portDescription = this.portDescriptionService.PortDescriptions[port].Clone();
                            portDescription.Protocol = Layer4ProtocolType.TCP;
                            basicScanItemDisplay.PortDescriptions.Add(portDescription);
                        }
                        else
                        {
                            var portDescription = new PortDescription(port, "Unknown") { Protocol = Layer4ProtocolType.TCP };
                            basicScanItemDisplay.PortDescriptions.Add(portDescription);
                        }
                    }

                    foreach (var port in udpPorts)
                    {
                        if (this.portDescriptionService.PortDescriptions.ContainsKey(port))
                        {
                            var portDescription = this.portDescriptionService.PortDescriptions[port].Clone();
                            portDescription.Protocol = Layer4ProtocolType.UDP;
                            basicScanItemDisplay.PortDescriptions.Add(portDescription);
                        }
                        else
                        {
                            var portDescription = new PortDescription(port, "Unknown") { Protocol = Layer4ProtocolType.UDP };
                            basicScanItemDisplay.PortDescriptions.Add(portDescription);
                        }
                    }

                    CommandManager.InvalidateRequerySuggested();

                    basicScanItemDisplay.IsPortScanRunning = false;
                });
            });
        }

        private void ScanSubdomains(DomainDisplay domainDisplay)
        {
            var selectedTargetDisplay = this.SelectedTargetDisplay;

            if (domainDisplay.IsSubdomainScanRunning)
                return;

            domainDisplay.IsSubdomainScanRunning = true;

            this.RunTask(uiThread =>
            {
                foreach (var domain in this.subdomainScanner.Scan(domainDisplay.Host))
                {
                    var host = Domain.GetHostByDomain(domain.Domain);
                    var ipWhoisResult = this.whoisLookup.Whois(domain.IPAddress);
                    var hostWhoisResult = this.whoisLookup.Whois(host);

                    uiThread.Execute(() =>
                    {
                        selectedTargetDisplay.AddDomain(domain.IPAddress, domain.Domain);

                        if (domain.IPAddress != "Unknown")
                        {
                            selectedTargetDisplay.AddWhoisLookup(domain.IPAddress, ipWhoisResult);
                            selectedTargetDisplay.AddWhoisLookup(host, hostWhoisResult);
                        }
                    });

                }

                foreach (var domain in this.subdomainFinder.Scan(domainDisplay.Host))
                {
                    var host = Domain.GetHostByDomain(domain.Domain);
                    var ipWhoisResult = this.whoisLookup.Whois(domain.IPAddress);
                    var hostWhoisResult = this.whoisLookup.Whois(host);

                    uiThread.Execute(() =>
                    {
                        selectedTargetDisplay.AddDomain(domain.IPAddress, domain.Domain);

                        if (domain.IPAddress != "Unknown")
                        {
                            selectedTargetDisplay.AddWhoisLookup(domain.IPAddress, ipWhoisResult);
                            selectedTargetDisplay.AddWhoisLookup(host, hostWhoisResult);
                        }

                    });
                }

                domainDisplay.IsSubdomainScanRunning = false;
            });
        }

        private void ScanPaths()
        {
            var webScanItemDisplay = this.SelectedTargetDisplay.SelectedWebScanItemDisplay;

            if (webScanItemDisplay.IsPathScanRunning)
                return;

            webScanItemDisplay.IsPathScanRunning = true;

            this.RunTask(uiThread =>
            {
                var httpUrls = this.pathFinder.Find(webScanItemDisplay.HttpUrl, webScanItemDisplay.ErrorContentStrings.ToList());

                uiThread.Execute(() =>
                    {
                        webScanItemDisplay.PathResults.Clear();

                        foreach (var httpUrl in httpUrls)
                            webScanItemDisplay.PathResults.Add(httpUrl);

                        webScanItemDisplay.IsPathScanRunning = false;
                    });
            });
        }

        private void ScanRobots()
        {
            var webScanItemDisplay = this.SelectedTargetDisplay.SelectedWebScanItemDisplay;

            if (webScanItemDisplay.IsRobotsScanRunning)
                return;

            webScanItemDisplay.IsRobotsScanRunning = true;

            this.RunTask(uiThread =>
            {
                var httpUrl = webScanItemDisplay.HttpUrl;
                var allowRobots = this.robotsAnalyzer.GetAllowUrls(httpUrl).Select(x => new RobotsResult(RobotsType.Allow, x));
                var disallowRobots = this.robotsAnalyzer.GetDisallowUrls(httpUrl).Select(x => new RobotsResult(RobotsType.Disallow, x));
                var sitemapRobots = this.robotsAnalyzer.GetSitemapUrls(httpUrl).Select(x => new RobotsResult(RobotsType.Sitemap, x));

                uiThread.Execute(() =>
                {
                    webScanItemDisplay.RobotsResults.Clear();

                    foreach (var robotsResult in allowRobots)
                        webScanItemDisplay.RobotsResults.Add(robotsResult);

                    foreach (var robotsResult in disallowRobots)
                        webScanItemDisplay.RobotsResults.Add(robotsResult);

                    foreach (var robotsResult in sitemapRobots)
                        webScanItemDisplay.RobotsResults.Add(robotsResult);

                    webScanItemDisplay.IsRobotsScanRunning = false;
                });
            });
        }

        private void CopyLink(HttpUrl httpUrl)
        {
            Clipboard.SetText(httpUrl.FullUrl);
        }

        private void CopyString(string text)
        {
            Clipboard.SetText(text);
        }

        private string RandomString(int length)
        {
            var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

            return new string(Enumerable.Repeat(chars, length).Select(s => s[random.Next(s.Length)]).ToArray());
        }

        private List<string> HandleHttpHeaderCompliance(HttpUrl httpUrl)
        {
            var randomUrl = this.RandomString(15) + "/" + this.RandomString(15);
            var errorStrings = new List<string>();

            if (this.browser.LoadHeader(httpUrl.FullUrl + randomUrl).IsSuccessStatusCode)
            {
                var result = this.browser.LoadWebsite(httpUrl.FullUrl + randomUrl, new List<string>());

                var dialog = new ErrorStringDialog(result.Content);
                var dialogResult = dialog.ShowDialog();

                if (dialogResult.HasValue && dialogResult.Value)
                    errorStrings = dialog.ErrorStringsText.Split(';').ToList();
            }

            return errorStrings;
        }

        public ICommand AddTargetCommand { get; }
        public ICommand AddDomainCommand { get; }
        public ICommand AddIpAddressCommand { get; }
        public ICommand AddWebScanCommand { get; }
        public ICommand CopyLinkCommand { get; }
        public ICommand CopyStringCommand { get; }
        public ICommand DeleteBasicScanItemCommand { get; }
        public ICommand DeleteTargetCommand { get; }
        public ICommand ExportCommand { get; }
        public ICommand ImportCommand { get; }
        public ICommand ScanAllBannersCommand { get; }
        public ICommand ScanAllPortsCommand { get; }
        public ICommand ScanArpCommand { get; }
        public ICommand ScanBannersCommand { get; }
        public ICommand ScanPathsCommand { get; }
        public ICommand ScanPortsCommand { get; }
        public ICommand ScanRobotsCommand { get; }
        public ICommand ScanSubdomainsCommand { get; }

        public TargetDisplay SelectedTargetDisplay
        {
            get
            {
                return this.selectedTargetDisplay;
            }
            set
            {
                this.selectedTargetDisplay = value;
                this.OnPropertyChanged();
            }
        }

        public ObservableCollection<TargetDisplay> TargetDisplays { get; set; } = new ObservableCollection<TargetDisplay>();

        [NotifyPropertyChangedInvocator]
        protected virtual void OnPropertyChanged([CallerMemberName]string propertyName = null)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}