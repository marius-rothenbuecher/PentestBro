using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Input;
using System.Windows.Threading;

namespace PentestBro.Gui
{
    [TemplatePart(Name = "PART_SearchText", Type = typeof(TextBox))]
    public class SearchBox : Control
    {
        public static readonly TimeSpan DefaultSearchDelay = TimeSpan.FromMilliseconds(300);
        
        public static readonly RoutedUICommand ClearTextCommand;
        public static readonly RoutedEvent SearchTextChangedEvent;
        
        public static readonly DependencyProperty TextProperty;
        public static readonly DependencyProperty HintTextProperty;
        public static readonly DependencyProperty InfoBoxVisibilityProperty;
        public static readonly DependencyProperty ClearTextButtonVisibilityProperty;

        private TextBox searchTextBox = null;
        private DispatcherTimer searchChangedTimer;
        
        static SearchBox()
        {
            // Commands & Events
            ClearTextCommand = new RoutedUICommand();
            CommandManager.RegisterClassCommandBinding(typeof(SearchBox), new CommandBinding(ClearTextCommand, ClearTextCommand_ExecuteHandler));
            SearchTextChangedEvent = EventManager.RegisterRoutedEvent("SearchTextChanged", RoutingStrategy.Bubble, typeof(TextChangedEventHandler), typeof(SearchBox));

            // Properties
            InfoBoxVisibilityProperty = DependencyProperty.Register("InfoBoxVisibility", typeof(Visibility), typeof(SearchBox), new FrameworkPropertyMetadata(Visibility.Visible));
            ClearTextButtonVisibilityProperty = DependencyProperty.Register("ClearTextButtonVisibility", typeof(Visibility), typeof(SearchBox), new FrameworkPropertyMetadata(Visibility.Hidden));
            TextProperty = DependencyProperty.Register("Text", typeof(string), typeof(SearchBox), new FrameworkPropertyMetadata(string.Empty, FrameworkPropertyMetadataOptions.BindsTwoWayByDefault, new PropertyChangedCallback(Text_ChangedHandler), null, true, UpdateSourceTrigger.PropertyChanged));
            HintTextProperty = DependencyProperty.Register("HintText", typeof(string), typeof(SearchBox), new FrameworkPropertyMetadata(string.Empty));

            // Default styles
            DefaultStyleKeyProperty.OverrideMetadata(typeof(SearchBox), new FrameworkPropertyMetadata(typeof(SearchBox)));
        }

        public SearchBox()
        {
            this.searchChangedTimer = new DispatcherTimer(DispatcherPriority.Normal, this.Dispatcher) { Interval = DefaultSearchDelay };
            this.searchChangedTimer.Tick += (s, e) =>
            {
                this.searchChangedTimer.Stop();
                this.RaiseEvent(new RoutedEventArgs(SearchBox.SearchTextChangedEvent));
            };
        }

        public Visibility InfoBoxVisibility
        {
            get { return (Visibility)this.GetValue(InfoBoxVisibilityProperty); }
            set { this.SetValue(InfoBoxVisibilityProperty, value); }
        }

        public Visibility ClearTextButtonVisibility
        {
            get { return (Visibility)this.GetValue(ClearTextButtonVisibilityProperty); }
            set { this.SetValue(ClearTextButtonVisibilityProperty, value); }
        }

        public string Text
        {
            get { return (string)this.GetValue(TextProperty); }
            set { this.SetValue(TextProperty, value); }
        }

        public string HintText
        {
            get { return (string)this.GetValue(HintTextProperty); }
            set { this.SetValue(HintTextProperty, value); }
        }

        public override void OnApplyTemplate()
        {
            base.OnApplyTemplate();
            this.searchTextBox = this.Template.FindName("PART_SearchText", this) as TextBox;

            if (this.searchTextBox == null)
                throw new ApplicationException("PART_SearchText not found in template");

            this.searchTextBox.IsKeyboardFocusedChanged += this.SearchBox_IsKeyboardFocusedChangedHandler;
            this.searchTextBox.TabIndex = this.TabIndex;
        }

        private static void Text_ChangedHandler(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            if (d is SearchBox searchBox)
            {
                searchBox.EvaluateVisualState(searchBox.IsKeyboardFocused);

                searchBox.searchChangedTimer.Stop();
                searchBox.searchChangedTimer.Start();
            }
        }

        private static void ClearTextCommand_ExecuteHandler(object sender, ExecutedRoutedEventArgs e)
        {
            if (sender is SearchBox searchBox)
            {
                searchBox.Text = string.Empty;
                searchBox.EvaluateVisualState(searchBox.IsKeyboardFocused);

                Keyboard.ClearFocus();
            }
        }

        private void SearchBox_IsKeyboardFocusedChangedHandler(object sender, DependencyPropertyChangedEventArgs e)
        {
            this.EvaluateVisualState((bool)e.NewValue);
        }

        private void EvaluateVisualState(bool hasFocus)
        {
            if (!hasFocus && string.IsNullOrEmpty(this.Text))
            {
                this.InfoBoxVisibility = Visibility.Visible;
                this.ClearTextButtonVisibility = Visibility.Collapsed;
            }
            else
            {
                this.InfoBoxVisibility = Visibility.Collapsed;
                this.ClearTextButtonVisibility = Visibility.Visible;
            }
        }
    }
}
