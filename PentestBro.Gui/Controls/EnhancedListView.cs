using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;

namespace PentestBro.Gui
{
    public class EnhancedListView : ListView
    {
        public static readonly DependencyProperty TargetPropertyNameProperty = DependencyProperty.RegisterAttached("TargetPropertyName", typeof(string), typeof(EnhancedListView));
        public static readonly DependencyProperty IsFilterEnabledProperty = DependencyProperty.RegisterAttached("IsFilterEnabled", typeof(bool), typeof(EnhancedListView), new UIPropertyMetadata(false));
        public static readonly DependencyProperty IsSortingEnabledProperty = DependencyProperty.RegisterAttached("IsSortingEnabled", typeof(bool), typeof(EnhancedListView), new UIPropertyMetadata(false));

        public static readonly DependencyProperty SortAdornerVerticalAlignmentProperty = DependencyProperty.Register("SortAdornerVerticalAlignment", typeof(VerticalAlignment), typeof(EnhancedListView), new PropertyMetadata(VerticalAlignment.Top));
        public static readonly DependencyProperty SortAdornerHorizontalAlignmentProperty = DependencyProperty.Register("SortAdornerHorizontalAlignment", typeof(HorizontalAlignment), typeof(EnhancedListView), new PropertyMetadata(HorizontalAlignment.Right));
        public static readonly DependencyProperty SortAdornerBrushProperty = DependencyProperty.Register("SortAdornerBrush", typeof(Brush), typeof(EnhancedListView), new PropertyMetadata(Brushes.Black));

        /// <summary>
        /// List of all filters
        /// </summary>
        private readonly Dictionary<string, string> columnFilters;

        /// <summary>
        /// Last clicked header
        /// </summary>
        private GridViewColumnHeader lastHeader = null;

        /// <summary>
        /// Last sort direction
        /// </summary>
        private ListSortDirection lastDirection = ListSortDirection.Ascending;

        /// <summary>
        /// Last adorner (required for sorting)
        /// </summary>
        private SortAdorner lastSortAdorner = null;

        private bool filterRowExists = false;

        public EnhancedListView()
        {
            this.columnFilters = new Dictionary<string, string>();

            // Handler for column click
            this.AddHandler(GridViewColumnHeader.ClickEvent, new RoutedEventHandler(this.GridViewColumnHeaderClickedHandler));

            // Handler for text changes
            this.AddHandler(SearchBox.SearchTextChangedEvent, new RoutedEventHandler(this.OnTextChanged), true);

            // Handle for loaded ListView
            this.Loaded += this.EnhancedListView_Loaded;

            KeyboardNavigation.SetTabNavigation(this, KeyboardNavigationMode.Continue);
        }

        public VerticalAlignment SortAdornerVerticalAlignment
        {
            get { return (VerticalAlignment)this.GetValue(SortAdornerVerticalAlignmentProperty); }
            set { this.SetValue(SortAdornerVerticalAlignmentProperty, value); }
        }

        public HorizontalAlignment SortAdornerHorizontalAlignment
        {
            get { return (HorizontalAlignment)this.GetValue(SortAdornerHorizontalAlignmentProperty); }
            set { this.SetValue(SortAdornerHorizontalAlignmentProperty, value); }
        }

        public Brush SortAdornerBrush
        {
            get { return (Brush)this.GetValue(SortAdornerBrushProperty); }
            set { this.SetValue(SortAdornerBrushProperty, value); }
        }

        public static string GetTargetPropertyName(GridViewColumn obj)
        {
            return (string)obj.GetValue(TargetPropertyNameProperty);
        }

        public static void SetTargetPropertyName(GridViewColumn obj, string value)
        {
            obj.SetValue(TargetPropertyNameProperty, value);
        }

        public static bool GetIsFilterEnabled(GridViewColumn obj)
        {
            return (bool)obj.GetValue(IsFilterEnabledProperty);
        }

        public static void SetIsFilterEnabled(GridViewColumn obj, bool value)
        {
            obj.SetValue(IsFilterEnabledProperty, value);
        }

        public static bool GetIsSortingEnabled(GridViewColumn obj)
        {
            return (bool)obj.GetValue(IsSortingEnabledProperty);
        }

        public static void SetIsSortingEnabled(GridViewColumn obj, bool value)
        {
            obj.SetValue(IsSortingEnabledProperty, value);
        }

        public static List<object> GetPropertyValues(object listItem, string property)
        {
            return GetPropertyValues(listItem, CreateItemizedPath(property, listItem.GetType()));
        }

        /// <summary>
        /// Take the values of a property
        /// </summary>
        public static List<object> GetPropertyValues(object item, List<TargetPropertyPathItem> propertyPath)
        {
            var values = new List<object>();

            var currentPropertyValue = item;

            for (int i = 0; i < propertyPath.Count; i++)
            {
                var propertyPathItem = propertyPath[i];

                try
                {
                    currentPropertyValue = propertyPathItem.ValueFunction.Invoke(currentPropertyValue);

                    if (currentPropertyValue is IDictionary dictionary)
                    {
                        var genericArguments = dictionary.GetType().GetGenericArguments();

                        if (genericArguments.Count() < 2)
                            break;

                        var keyType = genericArguments[0];
                        if (!keyType.IsEnum)
                            break;

                        currentPropertyValue = dictionary[Enum.Parse(keyType, propertyPathItem.DictionaryKey)];
                    }
                    else if (currentPropertyValue is IList list)
                    {
                        var listPath = propertyPath.GetRange(i + 1, propertyPath.Count - i - 1);

                        foreach (var element in list)
                        {
                            if (listPath.Any())
                                values.AddRange(GetPropertyValues(element, listPath));
                            else
                                values.Add(element);
                        }

                        break;
                    }

                    if (i + 1 == propertyPath.Count)
                        values.Add(currentPropertyValue);
                }
                catch (Exception)
                {
                    // Ignored.
                }
            }

            return values;
        }

        /// <summary>
        /// Finds a parent of a given item on the visual tree.
        /// </summary>
        /// <typeparam name="T">The type of the queried item.</typeparam>
        /// <param name="child">A direct or indirect child of the queried item.</param>
        /// <returns>The first parent item that matches the submitted
        /// type parameter. If not matching item can be found, a null reference is being returned.</returns>
        public static T TryFindParent<T>(DependencyObject child)
            where T : DependencyObject
        {
            var parentObject = GetParentObject(child);

            if (parentObject == null)
                return null;
            else if (parentObject is T parent)
                return parent;
            else
                return TryFindParent<T>(parentObject);
        }

        /// <summary>
        /// This method is an alternative to WPF's
        /// <see cref="VisualTreeHelper.GetParent"/> method, which also
        /// supports content elements. Do note, that for content element,
        /// this method falls back to the logical tree of the element.
        /// </summary>
        /// <param name="child">The item to be processed.</param>
        /// <returns>The submitted item's parent, if available. Otherwise null.</returns>
        public static DependencyObject GetParentObject(DependencyObject child)
        {
            if (child == null)
                return null;

            if (child is ContentElement contentElement)
            {
                var parent = ContentOperations.GetParent(contentElement);

                if (parent != null)
                    return parent;

                var fce = contentElement as FrameworkContentElement;
                return fce?.Parent;
            }

            // If it's not a ContentElement, rely on VisualTreeHelper
            return VisualTreeHelper.GetParent(child);
        }

        /// <summary>
        /// If source has changed sort by last known header and sort direction.
        /// </summary>
        protected override void OnItemsSourceChanged(IEnumerable oldValue, IEnumerable newValue)
        {
            base.OnItemsSourceChanged(oldValue, newValue);
            this.Sort(this.lastHeader, this.lastDirection);
            this.ApplyFilters();
        }

        private static Type GetListItemType(ListCollectionView lcv)
        {
            var listItemType = lcv.SourceCollection
                .GetType()
                .GetInterfaces()
                .Where(t => t.IsGenericType && t.GetGenericTypeDefinition() == typeof(IEnumerable<>))
                .Select(t => t.GetGenericArguments().FirstOrDefault())
                .FirstOrDefault();

            if (listItemType == null)
                throw new NotImplementedException("Only generic lists possible");

            return listItemType;
        }

        private static List<TargetPropertyPathItem> CreateItemizedPath(string propertyPath, Type listItemType)
        {
            var values = new List<TargetPropertyPathItem>();
            var propertyPathItems = propertyPath.Split('.');
            var currentPropertyType = listItemType;

            for (var i = 0; i < propertyPathItems.Length; i++)
            {
                var propertyPathItem = propertyPathItems[i];

                string dictKey = null;

                // Property is dictionary and index is used
                if (propertyPathItem.Contains("[") && propertyPathItem.Contains("]"))
                {
                    var indexStart = propertyPathItem.IndexOf('[') + 1;
                    var indexEnd = propertyPathItem.IndexOf(']');
                    var indexLength = indexEnd - indexStart;

                    dictKey = propertyPathItem.Substring(indexStart, indexLength);
                    propertyPathItem = propertyPathItem.Substring(0, indexStart);
                }

                var propertyInfo = currentPropertyType.GetProperty(propertyPathItem);

                if (propertyInfo == null)
                    Debugger.Break();

                var parameterExpression = System.Linq.Expressions.Expression.Parameter(typeof(object));
                var currentPropertyTypeConverter = System.Linq.Expressions.Expression.Convert(parameterExpression, currentPropertyType);
                var getMethodExtractor = System.Linq.Expressions.Expression.Call(currentPropertyTypeConverter, propertyInfo.GetMethod);
                var objectTypeConverter = System.Linq.Expressions.Expression.Convert(getMethodExtractor, typeof(object));
                var lambdaCreator = System.Linq.Expressions.Expression.Lambda(objectTypeConverter, parameterExpression);

                var valueFunction = (Func<object, object>)lambdaCreator.Compile();

                values.Add(new TargetPropertyPathItem
                {
                    PropertyName = propertyPathItem,
                    DictionaryKey = dictKey,
                    ValueFunction = valueFunction,
                });

                var subPropertyType = propertyInfo.PropertyType;

                if (typeof(IDictionary).IsAssignableFrom(subPropertyType))
                {
                    var genericArguments = subPropertyType.GetGenericArguments();

                    if (genericArguments.Count() < 2)
                        break;

                    var keyType = genericArguments[0];

                    if (!keyType.IsEnum)
                        break;

                    var valueType = genericArguments[1];

                    subPropertyType = valueType;
                }
                else if (typeof(IList).IsAssignableFrom(subPropertyType))
                {
                    var genericItemType = subPropertyType.GetGenericArguments().FirstOrDefault();
                    subPropertyType = genericItemType ?? typeof(object);
                }

                currentPropertyType = subPropertyType;
            }

            return values;
        }

        /// <summary>
        /// When view is loaded, set the correct header style.
        /// </summary>
        private void EnhancedListView_Loaded(object sender, RoutedEventArgs e)
        {
            // Set default column header style
            ((GridView)this.View).ColumnHeaderContainerStyle = (Style)this.FindResource("EnhancedGridViewColumnHeaderNoFilterStyle");

            this.filterRowExists = false;

            var gridView = (GridView)((EnhancedListView)sender).View;

            foreach (var item in gridView.Columns)
            {
                if (GetIsFilterEnabled(item))
                {
                    item.HeaderContainerStyle = (Style)this.FindResource("EnhancedGridViewColumnHeaderStyle");
                    this.filterRowExists = true;
                }
            }
            
            if (this.filterRowExists == false)
                ((GridView)this.View).ColumnHeaderContainerStyle = (Style)this.FindResource("GridViewColumnHeaderGeneralStyle");
        }
        
        private void OnTextChanged(object sender, RoutedEventArgs e)
        {
            var filterTextBox = e.OriginalSource as SearchBox;

            // Pick the header of the text box
            var header = TryFindParent<GridViewColumnHeader>(filterTextBox);

            if (header != null)
            {
                this.UpdateFilter(filterTextBox, header);
                this.ApplyFilters();
            }
        }
        
        private void UpdateFilter(SearchBox textBox, GridViewColumnHeader header)
        {
            var targetProperty = GetTargetPropertyName(header.Column);

            // Set the filter
            if (!string.IsNullOrEmpty(targetProperty))
                this.columnFilters[targetProperty] = textBox.Text;
        }

        /// <summary>
        /// Apply the filters.
        /// </summary>
        private void ApplyFilters()
        {
            var view = (ListCollectionView)CollectionViewSource.GetDefaultView(this.ItemsSource);

            if (view != null)
            {
                var listItemType = GetListItemType(view);

                var targetPropertyDictionary = this.columnFilters.Keys.ToDictionary(
                    path => path,
                    path => CreateItemizedPath(path, listItemType));

                // Create a filter
                view.Filter = item =>
                {
                    var show = true;

                    foreach (var filter in this.columnFilters)
                    {
                        if (string.IsNullOrEmpty(filter.Value))
                            continue;

                        var properties = GetPropertyValues(item, targetPropertyDictionary[filter.Key]);

                        if (properties != null)
                        {
                            var containsFilter = false;

                            foreach (var property in properties)
                            {
                                var propertyContent = string.Empty;

                                if (property != null)
                                    propertyContent = property.ToString();

                                var containsAny = propertyContent.ToLower().Contains(filter.Value.ToLower());

                                if (containsAny)
                                {
                                    containsFilter = true;
                                    break;
                                }
                            }

                            if (!containsFilter)
                            {
                                show = false;
                                break;
                            }
                        }
                    }
                    
                    return show;
                };
            }
        }

        /// <summary>
        /// Sort column, when header is clicked
        /// </summary>
        private void GridViewColumnHeaderClickedHandler(object sender, RoutedEventArgs e)
        {
            if (e.OriginalSource is GridViewColumnHeader header)
            {
                // Sorting only if column sorting is allowed
                if (header.Column == null || !GetIsSortingEnabled(header.Column))
                    return;

                if (header.Role != GridViewColumnHeaderRole.Padding)
                {
                    var direction = ListSortDirection.Ascending;

                    if (header == this.lastHeader)
                    {
                        if (this.lastDirection == ListSortDirection.Ascending)
                            direction = ListSortDirection.Descending;
                        else
                            direction = ListSortDirection.Ascending;
                    }

                    this.Sort(header, direction);
                }
            }
        }

        /// <summary>
        /// Sort the list (list in list not supported).
        /// </summary>
        private void Sort(GridViewColumnHeader header, ListSortDirection direction)
        {
            if (header != null && this.ItemsSource != null)
            {
                // Property, after what the view is being sorted
                var targetProperty = GetTargetPropertyName(header.Column);

                if (!string.IsNullOrEmpty(targetProperty))
                {
                    var listCollectionView = (ListCollectionView)CollectionViewSource.GetDefaultView(this.ItemsSource);
                    var listItemType = GetListItemType(listCollectionView);

                    listCollectionView.CustomSort = new ValueComparer(targetProperty, direction, listItemType);
                    listCollectionView.Refresh();

                    var currentSortAdorner = new SortAdorner(header, direction, this.SortAdornerVerticalAlignment, this.SortAdornerHorizontalAlignment, this.SortAdornerBrush, this.filterRowExists);

                    var layer = AdornerLayer.GetAdornerLayer(header);

                    if (layer != null)
                        layer.Add(currentSortAdorner);

                    // Remove arrow from previously sorted header
                    if (this.lastHeader != null)
                    {
                        var lastLayer = AdornerLayer.GetAdornerLayer(this.lastHeader);

                        if (lastLayer != null)
                            lastLayer.Remove(this.lastSortAdorner);
                    }

                    this.lastHeader = header;
                    this.lastDirection = direction;
                    this.lastSortAdorner = currentSortAdorner;
                }
            }
        }

        /// <summary>
        /// Struct used to represent an item of a target property path
        /// </summary>
        public class TargetPropertyPathItem
        {
            /// <summary>
            /// Name of the property
            /// </summary>
            public string PropertyName { get; set; }

            /// <summary>
            /// Used for dictionaries with index access
            /// </summary>
            public string DictionaryKey { get; set; }

            /// <summary>
            /// Function for retrieving value of this property from object that has this property
            /// </summary>
            public Func<object, object> ValueFunction { get; set; }

            public override string ToString()
            {
                if (this.DictionaryKey != null)
                {
                    return $"{this.PropertyName}[{this.DictionaryKey}]";
                }
                else
                {
                    return this.PropertyName;
                }
            }
        }

        public class ValueComparer : IComparer
        {
            private readonly ListSortDirection direction;
            private readonly List<TargetPropertyPathItem> targetPropertyPath;

            public ValueComparer(string targetPropertyName, ListSortDirection direction, Type listItemType)
            {
                this.targetPropertyPath = CreateItemizedPath(targetPropertyName, listItemType);
                this.direction = direction;
            }

            public int Compare(object x, object y)
            {
                var propertyValuesX = GetPropertyValues(x, this.targetPropertyPath);
                var propertyValuesY = GetPropertyValues(y, this.targetPropertyPath);

                var objectX = propertyValuesX.FirstOrDefault();
                var objectY = propertyValuesY.FirstOrDefault();

                var stringX = objectX?.ToString();
                var stringY = objectY?.ToString();

                if (stringX != null && stringY != null)
                {
                    if (objectX is IComparable compareableX && objectY is IComparable compareableY)
                    {
                        return this.direction == ListSortDirection.Ascending
                            ? compareableX.CompareTo(compareableY)
                            : compareableY.CompareTo(compareableX);
                    }

                    return this.direction == ListSortDirection.Ascending
                        ? stringX.CompareTo(stringY)
                        : stringY.CompareTo(stringX);
                }

                return 0;
            }
        }
    }
}
